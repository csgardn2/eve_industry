/// @file blueprint.cpp
/// @brief Implementation of @ref blueprint_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday November 16 2017
/// * Documentation is generated by doxygen, see html/index.html

#include <iostream>

#include <fstream>
#include <string>
#include <string_view>
#include <vector>

#include "blueprint.h"
#include "error.h"
#include "item_quantity.h"
#include "json.h"

void blueprint_t::read_from_json_file(std::istream& file)
{
    
    // Get the number of characters in the input file.
    if (!file.good())
        throw error_message_t(error_code_t::FILE_SIZE_FAILED, "Error.  Failed to determine file size when encoding blueprint_t object.\n");
    file.seekg(0, std::ios_base::end);
    unsigned file_size = file.tellg();
    file.seekg(0, std::ios_base::beg);
    
    // Read the entire file into RAM at once
    std::string buffer(file_size, '\0');
    file.read(buffer.data(), file_size);
    if (!file.good())
        throw error_message_t(error_code_t::FILE_READ_FAILED, "Error.  Failed to read file when decoding blueprint_t object.\n");
    this->read_from_json_buffer(std::string_view(buffer));
    
}

void blueprint_t::read_from_json_buffer(std::string_view buffer)
{
    
    Json::CharReaderBuilder builder;
    Json::CharReader* reader = builder.newCharReader();
    
    Json::Value json_root;
    std::string error_message;
    bool success = reader->parse(buffer.begin(), buffer.end(), &json_root, &error_message);
    delete reader;
    if (!success)
        Json::throwRuntimeError(error_message);
    
    // Now that the JSON syntax is parsed, extract the stat_list specific
    // data.
    this->read_from_json_structure(json_root);
    
}

void blueprint_t::read_from_json_structure(const Json::Value& json_root)
{
    
    // Parse root
    if (!json_root.isObject())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  Root of blueprint is not of type \"object\".\n");
    
    // Decode blueprint_id
    const Json::Value& json_blueprint_id = json_root["blueprint_id"];
    if (!json_blueprint_id.isUInt64())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <blueprint>/blueprint_id was not found or not of type \"unsigned integer\".\n");
    this->blueprint_id_ = json_blueprint_id.asUInt64();
    
    // Decode requires_invention
    const Json::Value& json_requires_invention = json_root["requires_invention"];
    if (!json_requires_invention.isBool())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <blueprint>/requires_invention was not found or not of type \"bool\".\n");
    this->requires_invention_ = json_requires_invention.asBool();
    
    // Decode manufacture  Validation done by callee.
    this->manufacture_.read_from_json_structure(json_root["manufacture"]);
    
    // Decode copy.  Validation done by callee.
    this->copy_.read_from_json_structure(json_root["copy"]);
    
    // Decode invention_choices
    const Json::Value& json_invention_choices = json_root["invention_choices"];
    if (!json_invention_choices.isArray())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <blueprint>/invention_choices was not found or not of type \"array\".\n");
    this->invention_choices_.clear();
    this->invention_choices_.reserve(json_invention_choices.size());
    for (const Json::Value& json_cur_array_element : json_invention_choices)
    {
        invent_t new_invent;
        new_invent.read_from_json_structure(json_cur_array_element);
        this->invention_choices_.emplace_back(std::move(new_invent));
    }
    
}

void blueprint_t::write_to_json_file(std::ostream& file, unsigned indent_start, unsigned spaces_per_tab) const
{
    std::string buffer;
    this->write_to_json_buffer(buffer, indent_start, spaces_per_tab);
    file << buffer;
    if (!file.good())
        throw error_message_t(error_code_t::FILE_WRITE_FAILED, "Error.  Failed to write file when encoding blueprint_t object.\n");
}

void blueprint_t::write_to_json_buffer(std::string& buffer, unsigned indent_start, unsigned spaces_per_tab) const
{
    
    std::string indent_2(indent_start + 2 * spaces_per_tab, ' ');
    std::string_view indent_1(indent_2.data(), spaces_per_tab + indent_start);
    std::string_view indent_0(indent_2.data(), indent_start);
    
    // It is recommended not to start a new line before the opening brace, to
    // enable chaining.
    buffer += "{\n";
    
    // Encode blueprint_id
    buffer += indent_1;
    buffer += "\"blueprint_id\": ";
    buffer += std::to_string(this->blueprint_id_);
    buffer += ",\n";
    
    // Encode requires_invention
    buffer += indent_1;
    buffer += "\"requires_invention\": ";
    buffer += this->requires_invention_ ? "true,\n" : "false,\n";
    
    // Encode manufacture
    buffer += indent_1;
    buffer += "\"manufacture\": ";
    this->manufacture_.write_to_json_buffer(buffer, indent_start + spaces_per_tab, spaces_per_tab);
    buffer += ",\n";
    
    // Encode copy
    buffer += indent_1;
    buffer += "\"copy\": ";
    this->copy_.write_to_json_buffer(buffer, indent_start + spaces_per_tab, spaces_per_tab);
    buffer += ",\n";
    
    // Encode invention_choices
    buffer += indent_1;
    buffer += "\"invention_choices\": ";
    
    unsigned num_invention_choices = this->invention_choices_.size();
    if (num_invention_choices == 0)
    {
        
        buffer += "[]\n";
        
    } else {
        
        buffer += "[\n";
        
        buffer += indent_2;
        for (unsigned ix = 0, last_ix = num_invention_choices - 1; ix <= last_ix; ix++)
        {
            
            this->invention_choices_[ix].write_to_json_buffer(buffer, indent_start + 2 * spaces_per_tab, spaces_per_tab);
            
            if (ix == last_ix)
                buffer += '\n';
            else
                buffer += ", ";
            
        }
        
        buffer += indent_1;
        buffer += "]\n";
        
    }
    
    // It is recommended to not put a newline on the last brace to allow
    // comma chaining when this object is an element of an array.
    buffer += indent_0;
    buffer += '}';
    
}

std::istream& operator>>(std::istream& stream, blueprint_t& destination)
{
    try
    {
        destination.read_from_json_file(stream);
    } catch (const error_message_t& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    } catch (const Json::Exception& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    }
    return stream;
}

void blueprint_t::validate_material_efficiency(unsigned candidate_material_efficiency)
{
    if (candidate_material_efficiency > 10)
    {
        std::string message("Error.  Material efficiency value of ");
        message += std::to_string(candidate_material_efficiency);
        message += " is not within the valid range [0 to 10].\n";
        throw error_message_t(error_code_t::INVALID_MATERIAL_EFFICIENCY, message);
    }
}

void blueprint_t::validate_time_efficiency(unsigned candidate_time_efficiency)
{
    if (candidate_time_efficiency > 20)
    {
        std::string message("Error.  Time efficiency value of ");
        message += std::to_string(candidate_time_efficiency);
        message += " is not within the valid range [0 to 20].\n";
        throw error_message_t(error_code_t::INVALID_TIME_EFFICIENCY, message);
    }
}

