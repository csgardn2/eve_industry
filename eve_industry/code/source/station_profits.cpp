/// @file station_profits.cpp
/// @brief Implementation of @ref station_profits_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday November 16 2017
/// * Documentation is generated by doxygen, see html/index.html

#include <fstream>
#include <string>
#include <string_view>
#include <vector>

#include "blueprints.h"
#include "blueprint_profit.h"
#include "error.h"
#include "json.h"
#include "station_market.h"
#include "station_profits.h"

void station_profits_t::calculate_blueprint_profits
(
    const blueprints_t& blueprints_in,
    const station_market_t& station_market,
    blueprint_profit_t::sort_strategy_t decryptor_optimization_strategy
){
    
    // Clear previous content
    this->blueprint_profits_.clear();
    this->blueprint_profits_.reserve(blueprints_in.storage().size());
    
    this->station_id_ = station_market.station_id();
    
    // Calculate profitability for each blueprint using this station's prices
    for (const std::pair<uint64_t, blueprint_t>& cur_blueprint : blueprints_in.storage())
    {
        blueprint_profit_t new_blueprint_profit;
        new_blueprint_profit.initialize_from_market(cur_blueprint.second, blueprints_in, station_market, decryptor_optimization_strategy);
        this->blueprint_profits_.emplace_back(std::move(new_blueprint_profit));
    }
    
}

void station_profits_t::read_from_json_file(std::istream& file)
{
    
    // Get the number of characters in the input file.
    if (!file.good())
        throw error_message_t(error_code_t::FILE_SIZE_FAILED, "Error.  Failed to determine file size when encoding station_profits_t object.\n");
    file.seekg(0, std::ios_base::end);
    unsigned file_size = file.tellg();
    file.seekg(0, std::ios_base::beg);
    
    // Read the entire file into RAM at once
    std::string buffer(file_size, '\0');
    file.read(buffer.data(), file_size);
    if (!file.good())
        throw error_message_t(error_code_t::FILE_READ_FAILED, "Error.  Failed to read file when decoding station_profits_t object.\n");
    this->read_from_json_buffer(std::string_view(buffer));
    
}

void station_profits_t::read_from_json_buffer(std::string_view buffer)
{
    
    Json::CharReaderBuilder builder;
    Json::CharReader* reader = builder.newCharReader();
    
    Json::Value json_root;
    std::string error_message;
    bool success = reader->parse(buffer.begin(), buffer.end(), &json_root, &error_message);
    delete reader;
    if (!success)
        Json::throwRuntimeError(error_message);
    
    // Now that the JSON syntax is parsed, extract the stat_list specific
    // data.
    this->read_from_json_structure(json_root);
    
}

void station_profits_t::read_from_json_structure(const Json::Value& json_root)
{
    
    // Parse root
    if (!json_root.isObject())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  Root of station_profits_t is not of type \"object\".\n");
    
    // Parse station_id
    const Json::Value& json_station_id = json_root["station_id"];
    if (!json_station_id.isUInt64())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <station_profits>/station_id was not found or not of type \"unsigned int\".\n");
    this->station_id_ = json_station_id.asUInt64();
    
    // Parse profits array
    const Json::Value& json_profits = json_root["profits"];
    if (!json_profits.isArray())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <station_profits>/profits was not found or not of type \"array\".\n");
    
    // Parse each element of profits array
    unsigned num_blueprint_profits = json_profits.size();
    this->blueprint_profits_.clear();
    this->blueprint_profits_.reserve(num_blueprint_profits);
    for (const Json::Value& json_cur_array_element : json_profits)
    {
        blueprint_profit_t new_blueprint_profit;
        new_blueprint_profit.read_from_json_structure(json_cur_array_element);
        this->blueprint_profits_.emplace_back(std::move(new_blueprint_profit));
    }
    
}

void station_profits_t::write_to_json_file(std::ostream& file, unsigned indent_start, unsigned spaces_per_tab) const
{
    std::string buffer;
    this->write_to_json_buffer(buffer, indent_start, spaces_per_tab);
    file << buffer;
    if (!file.good())
        throw error_message_t(error_code_t::FILE_WRITE_FAILED, "Error.  Failed to write file when encoding station_profits_t object.\n");
}

void station_profits_t::write_to_json_buffer(std::string& buffer, unsigned indent_start, unsigned spaces_per_tab) const
{
    
    std::string indent_2(indent_start + 2 * spaces_per_tab, ' ');
    std::string_view indent_1(indent_2.data(), indent_start + spaces_per_tab);
    std::string_view indent_0(indent_2.data(), indent_start);
    
    // It is recommended not to start a new line before the opening brace, to
    // enable chaining.
    buffer += "{\n";
    
    // Encode station_id
    buffer += indent_1;
    buffer += "\"station_id\": ";
    buffer += std::to_string(this->station_id_);
    buffer += ",\n";
    
    // Encode profits array
    buffer += indent_1;
    buffer += "\"profits\": ";
    
    unsigned num_station_profits = this->blueprint_profits_.size();
    if (num_station_profits == 0)
    {
        
        // Use compact notation for empty vectors
        buffer += "[]\n";
        
    } else {
        
        buffer += "[\n";
        
        // Encode each profit as an element of an array.
        buffer += indent_2;
        for (unsigned ix = 0, last_ix = num_station_profits - 1; ix <= last_ix; ix++)
        {
            this->blueprint_profits_[ix].write_to_json_buffer(buffer, indent_start + 2 * spaces_per_tab, spaces_per_tab);
            if (ix == last_ix)
                buffer += '\n';
            else
                buffer += ", ";
        }
    
    }
    
    buffer += indent_1;
    buffer += "]\n";
    
    // It is recommended to not put a newline on the last brace to allow
    // comma chaining when this object is an element of an array.
    buffer += indent_0;
    buffer += '}';
    
}

std::istream& operator>>(std::istream& stream, station_profits_t& destination)
{
    try
    {
        destination.read_from_json_file(stream);
    } catch (const error_message_t& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    } catch (const Json::Exception& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    }
    return stream;
}

