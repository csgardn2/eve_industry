/// @file manufacture.cpp
/// @brief Implementation of @ref blueprint_t::manufacture_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Friday November 24 2017
/// * Documentation is generated by doxygen, see html/index.html

#include <fstream>
#include <string>
#include <string_view>
#include <vector>

#include "blueprint.h"
#include "error.h"
#include "item_quantity.h"
#include "json.h"
#include "manufacture.h"

void blueprint_t::manufacture_t::material_efficiency(unsigned new_material_efficiency)
{
    if (new_material_efficiency > 10)
    {
        std::string message("Error.  Material efficiency value of ");
        message += std::to_string(new_material_efficiency);
        message += " is not within the valid range [0 to 10].\n";
        throw error_message_t(error_code_t::INVALID_MATERIAL_EFFICIENCY, message);
    }
    this->material_efficiency_ = new_material_efficiency;
}

inline void blueprint_t::manufacture_t::time_efficiency(unsigned new_time_efficiency)
{
    if (new_time_efficiency > 20)
    {
        std::string message("Error.  Time efficiency value of ");
        message += std::to_string(new_time_efficiency);
        message += " is not within the valid range [0 to 20].\n";
        throw error_message_t(error_code_t::INVALID_TIME_EFFICIENCY, message);
    }
    this->time_efficiency_ = new_time_efficiency;
}

void blueprint_t::manufacture_t::read_from_json_file(std::istream& file)
{
    
    // Get the number of characters in the input file.
    if (!file.good())
        throw error_message_t(error_code_t::FILE_SIZE_FAILED, "Error.  Failed to determine file size when encoding blueprint_t::manufacture_t object.\n");
    file.seekg(0, std::ios_base::end);
    unsigned file_size = file.tellg();
    file.seekg(0, std::ios_base::beg);
    
    // Read the entire file into RAM at once
    std::string buffer(file_size, '\0');
    file.read(buffer.data(), file_size);
    if (!file.good())
        throw error_message_t(error_code_t::FILE_READ_FAILED, "Error.  Failed to read file when decoding blueprint_t::manufacture_t object.\n");
    this->read_from_json_buffer(std::string_view(buffer));
    
}

void blueprint_t::manufacture_t::read_from_json_buffer(std::string_view buffer)
{
    
    Json::CharReaderBuilder builder;
    Json::CharReader* reader = builder.newCharReader();
    
    Json::Value json_root;
    std::string error_message;
    bool success = reader->parse(buffer.begin(), buffer.end(), &json_root, &error_message);
    delete reader;
    if (!success)
        Json::throwRuntimeError(error_message);
    
    // Now that the JSON syntax is parsed, extract the stat_list specific
    // data.
    this->read_from_json_structure(json_root);
    
}

void blueprint_t::manufacture_t::read_from_json_structure(const Json::Value& json_root)
{
    
    // Parse root
    if (!json_root.isObject())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  Root of manufacture is not of type \"object\".\n");
    
    // Decode input_materials
    const Json::Value& json_input_materials = json_root["input_materials"];
    if (!json_input_materials.isArray())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <manufacture>/input_materials was not found or not of type \"array\".\n");
    
    this->input_materials_.clear();
    this->input_materials_.reserve(json_input_materials.size());
    
    for (const Json::Value& json_cur_array_element : json_input_materials)
    {
        item_quantity_t new_item_quantity;
        new_item_quantity.read_from_json_structure(json_cur_array_element);
        this->input_materials_.emplace_back(std::move(new_item_quantity));
    }
    
    // Decode output_materials
    const Json::Value& json_output_materials = json_root["output_materials"];
    if (!json_output_materials.isArray())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <manufacture>/output_materials was not found or not of type \"array\".\n");
    
    this->output_materials_.clear();
    this->output_materials_.reserve(json_output_materials.size());
    
    for (const Json::Value& json_cur_array_element : json_output_materials)
    {
        item_quantity_t new_item_quantity;
        new_item_quantity.read_from_json_structure(json_cur_array_element);
        this->output_materials_.emplace_back(std::move(new_item_quantity));
    }
    
    // Decode material efficiency
    const Json::Value& json_material_efficiency = json_root["material_efficiency"];
    if (!json_material_efficiency.isUInt())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <manufacture>/material_efficiency was not found or not of type \"unsigned integer\".\n");
    this->material_efficiency(json_material_efficiency.asUInt());
    
    // Decode time efficiency
    const Json::Value& json_time_efficiency = json_root["time_efficiency"];
    if (!json_time_efficiency.isUInt())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <manufacture>/time_efficiency was not found or not of type \"unsigned integer\".\n");
    // Validate value before writing
    this->time_efficiency(json_time_efficiency.asUInt());
    
}

void blueprint_t::manufacture_t::write_to_json_file(std::ostream& file, unsigned indent_start, unsigned spaces_per_tab) const
{
    std::string buffer;
    this->write_to_json_buffer(buffer, indent_start, spaces_per_tab);
    file << buffer;
    if (!file.good())
        throw error_message_t(error_code_t::FILE_WRITE_FAILED, "Error.  Failed to write file when encoding blueprint_t::manufacture_t object.\n");
}

void blueprint_t::manufacture_t::write_to_json_buffer(std::string& buffer, unsigned indent_start, unsigned spaces_per_tab) const
{
    
    std::string indent_2(indent_start + 2 * spaces_per_tab, ' ');
    std::string_view indent_1(indent_2.data(), indent_start + spaces_per_tab);
    std::string_view indent_0(indent_2.data(), indent_start);
    
    // It is recommended not to start a new line before the opening brace, to
    // enable chaining.
    buffer += "{\n";
    
    // Encode input_materials
    buffer += indent_1;
    buffer += "\"input_materials\": ";
    unsigned num_input_materials = this->input_materials_.size();
    if (num_input_materials == 0)
    {
        
        buffer += "[],\n";
        
    } else {
        
        buffer += "[\n";
        buffer += indent_2;
        
        for (unsigned ix = 0, last_ix = num_input_materials - 1; ix <= last_ix; ix++)
        {
            
            this->input_materials_[ix].write_to_json_buffer(buffer, indent_start + 2 * spaces_per_tab, spaces_per_tab);
            
            if (ix == last_ix)
                buffer += '\n';
            else
                buffer += ", ";
            
        }
        
        buffer += indent_1;
        buffer += "],\n";
        
    }
    
    // Encode output_materials
    buffer += indent_1;
    buffer += "\"output_materials\": ";
    unsigned num_output_materials = this->output_materials_.size();
    if (num_output_materials == 0)
    {
        
        buffer += "[],\n";
        
    } else {
        
        buffer += "[\n";
        buffer += indent_2;
        
        for (unsigned ix = 0, last_ix = num_output_materials - 1; ix <= last_ix; ix++)
        {
            
            this->output_materials_[ix].write_to_json_buffer(buffer, indent_start + 2 * spaces_per_tab, spaces_per_tab);
            
            if (ix == last_ix)
                buffer += '\n';
            else
                buffer += ", ";
            
        }
        
        buffer += indent_1;
        buffer += "],\n";
        
    }
    
    // Encode material efficiency
    buffer += indent_1;
    buffer += "\"material_efficiency\": ";
    buffer += std::to_string(this->material_efficiency_);
    buffer += ",\n";
    
    // Encode time efficiency
    buffer += indent_1;
    buffer += "\"time_efficiency\": ";
    buffer += std::to_string(this->time_efficiency_);
    buffer += '\n';
    
    // It is recommended to not put a newline on the last brace to allow
    // comma chaining when this object is an element of an array.
    buffer += indent_0;
    buffer += '}';
    
}

std::istream& operator>>(std::istream& stream, blueprint_t::manufacture_t& destination)
{
    try
    {
        destination.read_from_json_file(stream);
    } catch (const error_message_t& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    } catch (const Json::Exception& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    }
    return stream;
}

