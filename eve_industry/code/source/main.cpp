/// @file main.cpp
/// @brief Entry point for this program
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday September 14 2017
/// * Documentation is generated by doxygen, see documentation/html_out/index.html

#include <fstream>
#include <iostream>

#include "args.h"
#include "error.h"
#include "item_attributes.h"
#include "item_ids.h"
#include "station_attributes.h"
#include "raw_regional_market.h"
#include "regional_market.h"

/// @brief Code execution starts here
int main(int argc, char** argv)
{
    
    try
    {
        
        args_t args;
        args.parse(argc, argv);
        
        switch (args.mode())
        {
            
            case args_t::mode_t::FETCH_ITEM_ATTRIBUTES:
            {
                
                // Open output file first so that we can find out if it fails
                // before doing all the work of fetching.
                std::ofstream item_attributes_out_file(args.item_attributes_out());
                if (!item_attributes_out_file.good())
                {
                    std::cerr << "Error.  Failed to open \"" << args.item_attributes_out() << "\" for writing.\n";
                    return -1;
                }
                
                if (args.debug_mode().verbose())
                    std::cout << "Fetching item ids...\n";
                item_ids_t item_ids;
                item_ids.debug_mode(args.debug_mode());
                item_ids.fetch();
                
                if (args.debug_mode().verbose())
                    std::cout << "Fetching item attributes\n";
                item_attributes_t item_attributes;
                item_attributes.debug_mode(args.debug_mode());
                item_attributes.fetch(item_ids);
                
                if (args.debug_mode().verbose())
                    std::cout << "Writing item attributes to file.\n";
                item_attributes.write_to_file(item_attributes_out_file);
                
                break;
                
            }
            
            case args_t::mode_t::FETCH_PRICES:
            {
                
                // Open item attributes from file
                if (args.debug_mode().verbose())
                    std::cout << "Parsing item-attributes-in file \"" << args.item_attributes_in() << "\".\n";
                std::ifstream item_attributes_in_file(args.item_attributes_in());
                if (!item_attributes_in_file.good())
                {
                    std::cerr << "Error.  Failed to open \"" << args.item_attributes_in() << "\" for reading.\n";
                    return -1;
                }
                item_attributes_t item_attributes_in;
                item_attributes_in.read_from_file(item_attributes_in_file);
                
                // Open station attributes from file
                if (args.debug_mode().verbose())
                    std::cout << "Parsing station-attributes-in file\"" << args.station_attributes_in() << "\".\n";
                std::ifstream station_attributes_in_file(args.station_attributes_in());
                if (!station_attributes_in_file.good())
                {
                    std::cerr << "Error.  Failed to open \"" << args.station_attributes_in() << "\" for reading.\n";
                    return -1;
                }
                station_attributes_t station_attributes_in;
                station_attributes_in.read_from_file(station_attributes_in_file);
                
                // Open file to output market data to
                std::ofstream prices_out_file(args.prices_out());
                if (!prices_out_file.good())
                {
                    std::cerr << "Error.  Failed to open \"" << args.prices_out() << "\" for writing.\n";
                    return -1;
                }
                
                // Fetch market data
                uint64_t cur_region = 10000043;
                if (args.debug_mode().verbose())
                    std::cout << "Fetching all market orders from region " << cur_region << '\n';
                raw_regional_market_t raw_regional_market;
                raw_regional_market.fetch(cur_region);
                
                // Post-process market data
                if (args.debug_mode().verbose())
                    std::cout << "Post-processing regional market for region" << cur_region << '\n';
                regional_market_t regional_market;
                regional_market.initialize_from_raw_regional_market(raw_regional_market);
                
                // Write market data to file
                if (args.debug_mode().verbose())
                    std::cout << "Writing post-processed market data to file \"" << args.prices_out() << "\".\n";
                regional_market.write_to_file(prices_out_file);
                
                break;
                
            }
            
            default:
            {
                std::cerr << "Error.  Unimplemented mode \"" << args_t::enum_to_string(args.mode()) << "\".\n";
                return -1;
            }
            
        }
    } catch (Json::Exception error) {
        std::cerr << error.what() << "  Fatal.  Could not decode JSON input file.\n";
        return -1;
    } catch (error_message_t error) {
        std::cerr << error;
        return -1;
    }
    
    return 0;
    
}

