/// @file args_blueprint_converter.h
/// @brief Declaration of @ref args::blueprint_converter_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Wednesday December 6 2017
/// * Documentation is generated by doxygen, see html/index.html

#ifndef HEADER_GUARD_ARGS_BLUEPRINT_CONVERTER
#define HEADER_GUARD_ARGS_BLUEPRINT_CONVERTER

#include <fstream>
#include <string>
#include <string_view>
#include <vector>

#include "error.h"
#include "json.h"

namespace args
{
    
    /// @brief Command line argument parsing and validation.
    class blueprint_converter_t
    {
            
        public:
            
            /// @brief Default constructor
            inline blueprint_converter_t()
            {
                this->clear();
            }
            
            // Add member initialization constructors here
            // Try to use initializer lists when possible.
            
            // Add operators here if desired.
            
            // Add member read and write functions
            
            inline const std::string& ccp_yaml_in() const
            {
                return this->ccp_yaml_in_;
            }
            
            inline const std::string& custom_json_out() const
            {
                return this->custom_json_out_;
            }
            
            // Add special-purpose functions here
            
            /// @brief Invalidate this args argument and reset all members to their
            /// default values.
            void clear();
            
            /// @brief Extract and validate command line arguments.
            ///
            /// @exception error_message_t
            void parse
            (
                /// [in] The number of strings in argv
                unsigned argc,
                /// [in] Array of strings passed to this program on the command line
                char const* const* argv
            );
            
            // Add encoders/decoders here
            
            /// @brief Open a file conforming to data/json/schema.json and use it to initialize
            /// this object, clearing previous content.
            ///
            /// @exception error_message_t
            /// @exception Json::Exception
            void read_from_json_file(std::istream& file);
            
            /// @brief Decode serialized content conforming to data/json/schema.json and use it
            /// to initialize this object, clearing previous content.
            ///
            /// @exception error_message_t
            /// @exception Json::Exception
            void read_from_json_buffer(std::string_view buffer);
            
            /// @brief Extract required data fields from a pre-parsed JSON tree
            /// and use them to initialize this object, clearing previous content.
            ///
            /// @exception error_message_t
            void read_from_json_structure(const Json::Value& json_root);
            
            /// @brief Serialize the content of this file into a file that
            /// conforms to the schema data/json/schema.json.
            void write_to_json_file
            (
                /// [out] Stream to append serialized object content to.
                std::ostream& file,
                /// [in] The number of space ' ' characters to prepend to each line
                /// in the serialized output.
                unsigned indent_start = 0,
                /// [in] The number of additional spaces ' ' on top of indent_start
                /// to prepend to each line in the serialized output for each
                /// additional level of nesting.
                ///
                /// Indentation typically increases after each opening bracket '['
                /// or brace '{' and decreases after each closing bracket ']' or
                /// brace '}'.
                unsigned spaces_per_tab = 4
            ) const;
            
            /// @brief Serialize the content of this file into a string that
            /// conforms to the schema data/json/schema.json.
            ///
            /// @exception error_message_t
            void write_to_json_buffer
            (
                /// [out] This string is overwritten with serialzed JSON content.
                std::string& buffer,
                /// [in] The number of space ' ' characters to prepend to each line
                /// in the serialized output.
                unsigned indent_start = 0,
                /// [in] The number of additional spaces ' ' on top of indent_start
                /// to prepend to each line in the serialized output for each
                /// additional level of nesting.
                ///
                /// Indentation typically increases after each opening bracket '['
                /// or brace '{' and decreases after each closing bracket ']' or
                /// brace '}'.
                unsigned spaces_per_tab = 4
            ) const;
            
        protected:
            
            // Try to make your members protected, even if they don't have to be.
            
            /// @brief Set to true if command line arguments have been parsed
            /// successfully and are sufficient to execute the program.
            bool valid_;
            
            /// --ccp-yaml-in <file.yaml>
            ///
            /// Path to CCP's static blueprint data export (SDE) downloaded from
            /// https://developers.eveonline.com/resource/resources.
            /// As of writting, the blueprint file is in sde/fsd/blueprints.yaml
            /// after extracting the SDE zip.
            ///
            /// Note: This string is the path to a file on your filesystem
            std::string ccp_yaml_in_;
            
            /// --custom-json-out <file.json>
            ///
            /// A JSON file to generate compatable with the eve_industry blueprint
            /// calculator.
            ///
            /// Note: This string is the path to a file on your filesystem
            std::string custom_json_out_;
            
    };
    
}

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const args::blueprint_converter_t& source)
{
    source.write_to_json_file(stream);
    return stream;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, args::blueprint_converter_t& destination);

#endif // Header Guard

