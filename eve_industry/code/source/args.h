/// @file args.h
/// @brief Declaration of @ref args_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday September 14 2017
/// * Documentation is generated by doxygen, see html/index.html

#ifndef HEADER_GUARD_ARGS
#define HEADER_GUARD_ARGS

#include <fstream>
#include <string_view>
#include <vector>

#include "error.h"
#include "json.h"

/// @brief Command line arguments are pre-processed, validated, and stored
/// in this structure for easy access.
class args_t
{
    
    /// Public section 1 of 2.
    public:
        
        /// @brief Specifies the high level operation to be performed by
        /// this tool.
        enum class mode_t
        {
            /// Pull the integral IDs of all the items in EvE.  This normally
            /// only has to be done once.
            /// * Inputs: EvE API
            /// * Outputs: --item-attributes-out
            FETCH_ITEM_ATTRIBUTES,
            /// Pull the integral IDs of all the player owned and NPC structures
            /// in Eve.  This normally only has to be done once.
            /// * Inputs: EvE API
            /// * Outputs: --station-attributes-out
            FETCH_STATION_ATTRIBUTES,
            /// This must be last.
            NUM_ENUMS
        };
        
    protected:
        
        /// @brief String representations of enumeration symbols.
        static const std::vector<std::string_view> error_names_;
        
        /// @brief Default error messages suitable for printing.  Note that
        /// some of these are inherently vague without additional information.
        static const std::vector<std::string_view> default_error_messages_;
        
        /// @brief String representations of enumeration symbols
        static const std::vector<std::string_view> mode_names_;
        
        /// @brief These are valid values that can be passed to --mode on the
        /// command line.
        static const std::vector<std::string_view> mode_values_;
        
        /// @brief The high-level operation to be performed by this tool.
        mode_t mode_;
        
        /// @brief Filename of a JSON file containing the integral IDs used by
        /// the EvE Swagger API for items.
        std::string item_attributes_out_;
        
        /// @brief Filename of a JSON file containing the integral IDs used by
        /// the EvE Swagger API for player owned structures and NPC stations.
        std::string station_attributes_out_;
        
    // Public section 2 of 2.
    public:
        
        /// @brief Return a printable representation of this enum.
        inline static std::string_view enum_to_string(mode_t mode)
        {
            return args_t::mode_names_[unsigned(mode)];
        }
        
        /// @brief Error codes are defined to facilitate programmatic detection and
        /// correction.
        enum class error_code_t
        {
            FILE_SIZE_FAILED,
            FILE_READ_FAILED,
            FILE_WRITE_FAILED,
            JSON_SCHEMA_VIOLATION,
            MODE_MISSING,
            MODE_INVALID,
            ITEM_ATTRIBUTES_OUT_MISSING,
            STATION_ATTRIBUTES_OUT_MISSING,
            /// This element must be last
            NUM_ENUMS
        };
        
        typedef error_message_template_t
        <
            error_code_t,
            error_names_,
            default_error_messages_
        > error_message_t;
        
        /// @brief Default constructor
        inline args_t() = default;
        
        /// @brief Copy constructor
        inline args_t(const args_t& source) = default;
        
        /// @brief Move constructor
        inline args_t(args_t&& source) = default;
        
        // Add member initialization constructors here
        // Try to use initializer lists when possible.
        
        /// @brief Initialization constructor
        inline args_t(unsigned argc, char const* const* argv)
        {
            this->parse(argc, argv);
        }
        
        /// See @ref decode(std::istream& file)
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        inline args_t(std::istream& file)
        {
            this->decode(file);
        }
        
        /// @brief See @ref decode(std::istream& file)
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        inline args_t(std::string_view buffer)
        {
            this->decode(buffer);
        }
        
        /// @brief See @ref decode(const Json::Value& json_root)
        ///
        /// @exception error_message_t
        inline args_t(const Json::Value& json_root)
        {
            this->decode(json_root);
        }
        
        /// @brief Destructor
        inline ~args_t() = default;
        
        /// @brief Assignment operator with deep copy.
        inline args_t& operator=(const args_t& source) = default;
        
        /// @brief Assignment operator with shallow copy.
        inline args_t& operator=(args_t&& source) = default;
        
        /// @brief Read access to @ref mode_ member.
        inline mode_t mode() const
        {
            return this->mode_;
        }
        
        /// @brief Read access to @ref item_attributes_out_ member.
        inline const std::string& item_attributes_out() const
        {
            return this->item_attributes_out_;
        }
        
        inline const std::string& station_attributes_out() const
        {
            return this->station_attributes_out_;
        }
        
        /// @brief See @ref decode(std::istream& file)
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        inline args_t& operator=(std::istream& file)
        {
            this->decode(file);
            return *this;
        }
        
        /// @brief See @ref decode(std::string_view buffer)
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        inline args_t& operator=(std::string_view buffer)
        {
            this->decode(buffer);
            return *this;
        }
        
        /// @brief See @ref decode(const Json::Value& json_root)
        ///
        /// @exception error_message_t
        inline args_t& operator=(const Json::Value& json_root)
        {
            this->decode(json_root);
            return *this;
        }
        
        // Add more operators here if desired.
        
        /// @brief Extract arguments from the command line and validate them.
        /// Any previous content is destroyed.
        ///
        /// @exception args_t::error_message_t.
        void parse
        (
            /// The number of strings in argv.  You can pass this from main.
            unsigned argc,
            /// Array of strings generated where each string is a whitespace
            /// delemited item from the command line.  You can pass this from
            /// main.
            char const* const* argv
        );
        
        /// @brief Reset all arguments to their zero/empty values.
        void clear();
        
        /// @brief Open a file conforming to data/json/schema.json and use it to
        /// initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void decode(std::istream& file);
        
        /// @brief Decode serialized content conforming to data/json/schema.json
        /// and use it to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void decode(std::string_view buffer);
        
        /// @brief Extract required data fields from a pre-parsed JSON tree
        /// and use them to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        void decode(const Json::Value& json_root);
        
        /// @brief Serialize the content of this file into a file that
        /// conforms to the schema data/json/schema.json.
        void encode
        (
            /// [out] Stream to append serialized object content to.
            std::ostream& file,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
        /// @brief Serialize the content of this file into a string that
        /// conforms to the schema data/json/schema.json.
        ///
        /// @exception error_message_t
        void encode
        (
            /// [out] This string is overwritten with serialzed JSON content.
            std::string& buffer,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
        /// @brief Convinence method for pretty initialize-on-construction
        /// syntax.
        inline std::string encode
        (
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const {
            std::string buffer;
            this->encode(buffer, indent_start, spaces_per_tab);
            return buffer;
        }
        
};

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, args_t::error_code_t error_code)
{
    stream << args_t::error_message_t::enum_to_string(error_code);
    return stream;
}

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const args_t::error_message_t& error_message)
{
    stream << error_message.message();
    return stream;
}

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const args_t& source)
{
    stream << source.encode();
    return stream;
}

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::string& operator<<(std::string& buffer, const args_t& source)
{
    buffer += source.encode();
    return buffer;
}

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, args_t::mode_t mode)
{
    stream << args_t::enum_to_string(mode);
    return stream;
}

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::string& operator<<(std::string& buffer, args_t::mode_t mode)
{
    buffer += args_t::enum_to_string(mode);
    return buffer;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, args_t& destination);

/// @brief Extraction operator for decoding.
inline std::string_view operator>>(std::string_view& buffer, args_t& destination)
{
    destination.decode(buffer);
    return std::string_view();
}

/// @brief Extraction operator for decoding.
inline Json::Value operator>>(const Json::Value& json_root, args_t& destination)
{
    destination.decode(json_root);
    return Json::Value();
}

#endif // Header Guard
