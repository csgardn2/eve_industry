/// @file blueprint.h
/// @brief Declaration of @ref blueprint_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday November 16 2017
/// * Documentation is generated by doxygen, see html/index.html

#ifndef HEADER_GUARD_BLUEPRINT
#define HEADER_GUARD_BLUEPRINT

#include <fstream>
#include <string_view>
#include <vector>

#include "error.h"
#include "item_quantity.h"
#include "json.h"

/// @brief Specifies required input materials, material quantities, material
/// and time efficiency, and invention probabilities, and run times.  Does NOT
/// include skill or station bonuses.
class blueprint_t
{
        
    public:
        
        class manufacture_t;
        
        /// @brief Default constructor
        inline blueprint_t() = default;
        
        // Add member initialization constructors here
        // Try to use initializer lists when possible.
        
        // Add operators here if desired.
        
        // Add member read and write functions
        
        inline uint64_t blueprint_id() const
        {
            return this->blueprint_id_;
        }
        
        inline void blueprint_id(uint64_t new_blueprint_id)
        {
            this->blueprint_id_ = new_blueprint_id;
        }
        
        inline bool requires_invention() const
        {
            return this->requires_invention_;
        }
        
        inline void requires_invention(bool new_requires_invention)
        {
            this->requires_invention_ = new_requires_invention;
        }
        
        // Add special-purpose functions here
        
        // Add encoders/decoders here
        
        /// @brief Open a file conforming to data/json/schema.json and use it to initialize
        /// this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void read_from_json_file(std::istream& file);
        
        /// @brief Decode serialized content conforming to data/json/schema.json and use it
        /// to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void read_from_json_buffer(std::string_view buffer);
        
        /// @brief Extract required data fields from a pre-parsed JSON tree
        /// and use them to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        void read_from_json_structure(const Json::Value& json_root);
        
        /// @brief Serialize the content of this file into a file that
        /// conforms to the schema data/json/schema.json.
        void write_to_json_file
        (
            /// [out] Stream to append serialized object content to.
            std::ostream& file,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
        /// @brief Serialize the content of this file into a string that
        /// conforms to the schema data/json/schema.json.
        ///
        /// @exception error_message_t
        void write_to_json_buffer
        (
            /// [out] This string is overwritten with serialzed JSON content.
            std::string& buffer,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
    protected:
        
        // Try to make your members protected, even if they don't have to be.
        
        /// @brief The integral ID of this blueprint original, not its output product.
        uint64_t blueprint_id_;
        
        /// @brief Set this to true if you can only acquire this blueprint via
        // invention and want to include the average invention costs will be
        /// included in profitability reports.
        bool requires_invention_;
        
        // TODO add structures for manufacture, copy, and invent
        
};

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const blueprint_t& source)
{
    source.write_to_json_file(stream);
    return stream;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, blueprint_t& destination);

#endif // Header Guard

