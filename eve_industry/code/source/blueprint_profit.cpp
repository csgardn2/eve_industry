/// @file blueprint_profit.cpp
/// @brief Implementation of @ref blueprint_profit_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday November 16 2017
/// * Documentation is generated by doxygen, see html/index.html

#include <fstream>
#include <string>
#include <string_view>

#include "blueprint.h"
#include "blueprint_profit.h"
#include "error.h"
#include "json.h"
#include "manufacturability.h"
#include "station_market.h"

void blueprint_profit_t::initialize_from_market
(
    const blueprint_t& blueprint_of_interest,
    const blueprints_t& all_blueprints,
    const station_market_t& station_market,
    sort_strategy_t decryptor_optimization_strategy
){
    
    // calculate profits for each decryptor
    
    this->blueprint_id_ = blueprint_of_interest.blueprint_id();
    
    // This will get overwritten if an error occurs
    this->manufacturability_.status(manufacturability_t::status_t::OK);
    
    // If this is a T1 blueprint, then the calculation is easy and requires no
    // decryptors
    const blueprint_t::manufacture_t& manufacture = blueprint_of_interest.manufacture();
    if (blueprint_of_interest.invent().valid())
    {
        
        // This is a T2 blueprint that requires invention
        
        // TODO
        
        this->manufacturability_.status(manufacturability_t::status_t::MISSING_MARKET_DATA);
        this->manufacturability_.message("T2 code not implemented.");
        
        
    } else {
        
        // This is a T1 blueprint
        
        this->time_ = manufacture.time();
        
        // Calculate total cost, or mark this item as unmanufacturable if there
        // is insufficient market data.
        try
        {
            this->total_cost_ = manufacture.input_materials().total_sell_value
            (
                station_market,
                manufacture.material_efficiency()
            );
        } catch (const error_message_t& error) {
            if (error == error_code_t::NO_ORDERS)
            {
                this->manufacturability_.status(manufacturability_t::status_t::MISSING_MARKET_DATA);
                this->manufacturability_.message(error.message());
            } else {
                throw error;
            }
        }
        
        // Calculate output value
        try
        {
            this->output_value_ = manufacture.output_materials().total_sell_value
            (
                station_market,
                0 // Material efficiency does not affect output amount
            );
        } catch (const error_message_t& error) {
            if (error == error_code_t::NO_ORDERS)
            {
                this->manufacturability_.status(manufacturability_t::status_t::MISSING_MARKET_DATA);
                this->manufacturability_.message(error.message());
            } else {
                throw error;
            }
        }
        
        this->optimal_decryptor_ = decryptor_t::type_t::NO_DECRYPTOR;
        
    }
    
}

void blueprint_profit_t::read_from_json_file(std::istream& file)
{
    
    // Get the number of characters in the input file.
    if (!file.good())
        throw error_message_t(error_code_t::FILE_SIZE_FAILED, "Error.  Failed to determine file size when encoding blueprint_profit_t object.\n");
    file.seekg(0, std::ios_base::end);
    unsigned file_size = file.tellg();
    file.seekg(0, std::ios_base::beg);
    
    // Read the entire file into RAM at once
    std::string buffer(file_size, '\0');
    file.read(buffer.data(), file_size);
    if (!file.good())
        throw error_message_t(error_code_t::FILE_READ_FAILED, "Error.  Failed to read file when decoding blueprint_profit_t object.\n");
    this->read_from_json_buffer(std::string_view(buffer));
    
}

void blueprint_profit_t::read_from_json_buffer(std::string_view buffer)
{
    
    Json::CharReaderBuilder builder;
    Json::CharReader* reader = builder.newCharReader();
    
    Json::Value json_root;
    std::string error_message;
    bool success = reader->parse(buffer.begin(), buffer.end(), &json_root, &error_message);
    delete reader;
    if (!success)
        Json::throwRuntimeError(error_message);
    
    // Now that the JSON syntax is parsed, extract the stat_list specific
    // data.
    this->read_from_json_structure(json_root);
    
}

void blueprint_profit_t::read_from_json_structure(const Json::Value& json_root)
{
    
    // Parse root
    if (!json_root.isObject())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  Root of blueprint_profit is not of type \"object\".\n");
    
    // Parse manufacturability
    const Json::Value& json_manufacturability = json_root["manufacturability"];
    this->manufacturability_.read_from_json_structure(json_manufacturability);
    
    // Parse blueprint_id
    const Json::Value& json_blueprint_id = json_root["blueprint_id"];
    if (!json_blueprint_id.isUInt64())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error <blueprint_profit>/blueprint_id was not found or not of type \"unsigned integer\".\n");
    this->blueprint_id_ = json_blueprint_id.asUInt64();
    
    // If this blueprint cannot be manufactured, then all other fields are invalid
    if (this->manufacturability_.is_ok())
    {
        
        // Parse time
        const Json::Value& json_time = json_root["time"];
        if (!json_time.isUInt())
            throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error <blueprint_profit>/time was not found or not of type \"unsigned integer\".\n");
        this->time_ = json_time.asUInt();
        
        // Parse total_cost
        const Json::Value& json_total_cost = json_root["total_cost"];
        if (!json_total_cost.isNumeric())
            throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error <blueprint_profit>/total_cost was not found or not of type \"float\".\n");
        this->total_cost_ = json_total_cost.asFloat();
        
        // Parse output_value
        const Json::Value& json_output_value = json_root["output_value"];
        if (!json_output_value.isNumeric())
            throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error <blueprint_profit>/output_value was not found or not of type \"float\".\n");
        this->output_value_ = json_output_value.asFloat();
        
        // Parse optimal_decryptor_id
        this->optimal_decryptor_.read_from_json_structure(json_root["optimal_decryptor"]);
        
    }
    
    // Ignore derivable stats like profit_amount
    
}

void blueprint_profit_t::write_to_json_file(std::ostream& file, unsigned indent_start, unsigned spaces_per_tab) const
{
    std::string buffer;
    this->write_to_json_buffer(buffer, indent_start, spaces_per_tab);
    file << buffer;
    if (!file.good())
        throw error_message_t(error_code_t::FILE_WRITE_FAILED, "Error.  Failed to write file when encoding blueprint_profit_t object.\n");
}

void blueprint_profit_t::write_to_json_buffer(std::string& buffer, unsigned indent_start, unsigned spaces_per_tab) const
{
    
    std::string indent_1(indent_start + 1 * spaces_per_tab, ' ');
    std::string_view indent_0(indent_1.data(), indent_start);
    
    // It is recommended not to start a new line before the opening brace, to
    // enable chaining.
    buffer += "{\n";
    
    buffer += indent_1;
    buffer += "\"manufacturability\": ";
    this->manufacturability_.write_to_json_buffer(buffer, indent_start + spaces_per_tab, spaces_per_tab);
    buffer += ",\n";
    
    buffer += indent_1;
    buffer += "\"blueprint_id\": ";
    buffer += std::to_string(this->blueprint_id_);
    
    // All other members are only valid if this blueprint is manufacturable.
    if (this->manufacturability_.is_ok())
    {
        
        buffer += ",\n";
        
        // Encode base statistics
        
        buffer += indent_1;
        buffer += "\"time\": ";
        buffer += std::to_string(this->time_);
        buffer += ",\n";
        
        buffer += indent_1;
        buffer += "\"total_cost\": ";
        buffer += std::to_string(this->total_cost_);
        buffer += ",\n";
        
        buffer += indent_1;
        buffer += "\"output_value\": ";
        buffer += std::to_string(this->output_value_);
        buffer += ",\n";
        
        buffer += indent_1;
        buffer += "\"optimal_decryptor\": ";
        this->optimal_decryptor_.write_to_json_buffer(buffer);
        buffer += ",\n";
        
        // Encode optional, derived stats.
        buffer += indent_1;
        buffer += "\"profit_amount\": ";
        buffer += std::to_string(this->profit_amount());
        buffer += ",\n";
        
        buffer += indent_1;
        buffer += "\"profit_percent\": ";
        buffer += std::to_string(this->profit_percent());
        buffer += ",\n";
        
        buffer += indent_1;
        buffer += "\"profit_per_second\": ";
        buffer += std::to_string(this->profit_per_second());
        buffer += '\n';
    
    } else {
        
        buffer += '\n';
        
    }
    
    // It is recommended to not put a newline on the last brace to allow
    // comma chaining when this object is an element of an array.
    buffer += indent_0;
    buffer += '}';
    
}

std::istream& operator>>(std::istream& stream, blueprint_profit_t& destination)
{
    try
    {
        destination.read_from_json_file(stream);
    } catch (const error_message_t& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    } catch (const Json::Exception& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    }
    return stream;
}

