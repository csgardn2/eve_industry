/// @file invent.h
/// @brief Declaration of @ref invent_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Friday November 24 2017
/// * Documentation is generated by doxygen, see html/index.html

#ifndef HEADER_GUARD_INVENT
#define HEADER_GUARD_INVENT

// Don't include anything
// Let blueprint.h include all your files
// This way you won't actually make any extra inner classes accidently.

/// @brief All of the blueprint attributes related to invention runs.
class invent_t
{
        
    public:
        
        /// @brief Default constructor
        inline invent_t() = default;
        
        // Add member initialization constructors here
        // Try to use initializer lists when possible.
        
        // Add operators here if desired.
        
        // Add member read and write functions
        
        inline unsigned time() const
        {
            return this->time_;
        }
        
        inline void time(unsigned new_time)
        {
            this->time_ = new_time;
        }
        
        inline float probability() const
        {
            return this->probability_;
        }
        
        void probability(float new_probability);
        
        inline const item_quantities_t& input_materials() const
        {
            return this->input_materials_;
        }
        
        inline item_quantities_t& input_materials()
        {
            return this->input_materials_;
        }
        
        inline uint64_t output_id() const
        {
            return this->output_id_;
        }
        
        inline void output_id(uint64_t new_output_id)
        {
            this->output_id_ = new_output_id;
        }
        
        inline unsigned material_efficiency() const
        {
            return this->material_efficiency_;
        }
        
        inline void material_efficiency(unsigned new_material_efficiency)
        {
            validate_material_efficiency(new_material_efficiency);
            this->material_efficiency_ = new_material_efficiency;
        }
        
        inline unsigned time_efficiency() const
        {
            return this->time_efficiency_;
        }
        
        inline void time_efficiency(unsigned new_time_efficiency)
        {
            validate_time_efficiency(new_time_efficiency);
            this->time_efficiency_ = new_time_efficiency;
        }
        
        inline unsigned runs() const
        {
            return this->runs_;
        }
        
        inline void runs(unsigned new_runs)
        {
            this->runs_ = new_runs;
        }
        
        // Add special-purpose functions here
        
        // Add encoders/decoders here
        
        /// @brief Open a file conforming to data/json/schema.json and use it to initialize
        /// this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void read_from_json_file(std::istream& file);
        
        /// @brief Decode serialized content conforming to data/json/schema.json and use it
        /// to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void read_from_json_buffer(std::string_view buffer);
        
        /// @brief Extract required data fields from a pre-parsed JSON tree
        /// and use them to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        void read_from_json_structure(const Json::Value& json_root);
        
        /// @brief Serialize the content of this file into a file that
        /// conforms to the schema data/json/schema.json.
        void write_to_json_file
        (
            /// [out] Stream to append serialized object content to.
            std::ostream& file,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
        /// @brief Serialize the content of this file into a string that
        /// conforms to the schema data/json/schema.json.
        ///
        /// @exception error_message_t
        void write_to_json_buffer
        (
            /// [out] This string is overwritten with serialzed JSON content.
            std::string& buffer,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
    protected:
        
        // Try to make your members protected, even if they don't have to be.
        
        /// @brief The number of seconds required to perform an invention run on
        /// a single 1-run input blueprint.
        unsigned time_;
        
        /// @brief The probability of successfully inventing this blueprint with
        /// no skills, bonuses, or decryptors.
        ///
        /// Valid values range from [0.0f to 1.0f].
        float probability_;
        
        /// @brief List of materials and datacores but NOT decryptors and their
        /// quantities consumed when inventing a single 1-run BPC.
        item_quantities_t input_materials_;
        
        /// @brief Integral ID of the T2 blueprint copy produced after an invention run.
        uint64_t output_id_;
        
        /// @brief Material efficiency of the resultant T2 blueprint with no decryptors.
        ///
        /// Valid values range from [0 to 10].
        unsigned material_efficiency_;
        
        /// @brief Time efficiency of the resultant T2 blueprint with no decryptors.
        ///
        /// Valid values range from [0 to 20].
        unsigned time_efficiency_;
        
        /// @brief Runs per copy for a single output T2 blueprint with no decryptors.
        unsigned runs_;
        
};

#endif // Header Guard

