/// @file blueprint.h
/// @brief Declaration of @ref blueprint_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday November 16 2017
/// * Documentation is generated by doxygen, see html/index.html

#ifndef HEADER_GUARD_BLUEPRINT
#define HEADER_GUARD_BLUEPRINT

#include <fstream>
#include <string_view>

#include "error.h"
#include "item_quantity.h"
#include "item_quantities.h"
#include "json.h"

/// @brief Specifies required input materials, material quantities, material
/// and time efficiency, and invention probabilities, and run times.  Does NOT
/// include skill or station bonuses.
class blueprint_t
{
        
    public:
        
        #include "copy.h"
        #include "invent.h"
        #include "manufacture.h"
        
        /// @brief Default constructor
        inline blueprint_t() = default;
        
        // Add member initialization constructors here
        // Try to use initializer lists when possible.
        
        // Add operators here if desired.
        
        // Add member read and write functions
        
        inline uint64_t blueprint_id() const
        {
            return this->blueprint_id_;
        }
        
        inline void blueprint_id(uint64_t new_blueprint_id)
        {
            this->blueprint_id_ = new_blueprint_id;
        }
        
        inline const manufacture_t& manufacture() const
        {
            return this->manufacture_;
        }
        
        inline manufacture_t& manufacture()
        {
            return this->manufacture_;
        }
        
        inline const copy_t& copy() const
        {
            return this->copy_;
        }
        
        inline copy_t& copy()
        {
            return this->copy_;
        }
        
        inline const invent_t& invent() const
        {
            return this->invent_;
        }
        
        inline invent_t& invent()
        {
            return this->invent_;
        }
        
        // Add special-purpose functions here
        
        // Add encoders/decoders here
        
        /// @brief Open a file conforming to data/json/schema.json and use it to initialize
        /// this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void read_from_json_file(std::istream& file);
        
        /// @brief Decode serialized content conforming to data/json/schema.json and use it
        /// to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        /// @exception Json::Exception
        void read_from_json_buffer(std::string_view buffer);
        
        /// @brief Extract required data fields from a pre-parsed JSON tree
        /// and use them to initialize this object, clearing previous content.
        ///
        /// @exception error_message_t
        void read_from_json_structure(const Json::Value& json_root);
        
        /// @brief Serialize the content of this file into a file that
        /// conforms to the schema data/json/schema.json.
        void write_to_json_file
        (
            /// [out] Stream to append serialized object content to.
            std::ostream& file,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
        /// @brief Serialize the content of this file into a string that
        /// conforms to the schema data/json/schema.json.
        ///
        /// @exception error_message_t
        void write_to_json_buffer
        (
            /// [out] This string is overwritten with serialzed JSON content.
            std::string& buffer,
            /// [in] The number of space ' ' characters to prepend to each line
            /// in the serialized output.
            unsigned indent_start = 0,
            /// [in] The number of additional spaces ' ' on top of indent_start
            /// to prepend to each line in the serialized output for each
            /// additional level of nesting.
            ///
            /// Indentation typically increases after each opening bracket '['
            /// or brace '{' and decreases after each closing bracket ']' or
            /// brace '}'.
            unsigned spaces_per_tab = 4
        ) const;
        
    protected:
        
        // Try to make your members protected, even if they don't have to be.
        
        /// @brief The integral ID of this blueprint original, not its output product.
        uint64_t blueprint_id_;
        
        /// @brief See @ref manufacture_t.
        manufacture_t manufacture_;
        
        /// @brief See @ref copy_t
        copy_t copy_;
        
        /// @brief See @ref invent_t
        invent_t invent_;
        
        /// @brief Makes sure that a material efficiency value is within a valid
        /// range, and throws an error if it's not.
        /// 
        /// @exception error_message_t
        static void validate_material_efficiency(unsigned candidate_time_efficiency);
        
        /// @brief Makes sure that a time efficiency value is within a valid
        /// range, and throws an error if it's not.
        /// 
        /// @exception error_message_t
        static void validate_time_efficiency(unsigned candidate_time_efficiency);
        
};

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const blueprint_t::manufacture_t& source)
{
    source.write_to_json_file(stream);
    return stream;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, blueprint_t::manufacture_t& destination);

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const blueprint_t::copy_t& source)
{
    source.write_to_json_file(stream);
    return stream;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, blueprint_t::copy_t& destination);

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const blueprint_t::invent_t& source)
{
    source.write_to_json_file(stream);
    return stream;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, blueprint_t::invent_t& destination);

/// @brief Convenience alias to allow printing directly via cout or similar.
inline std::ostream& operator<<(std::ostream& stream, const blueprint_t& source)
{
    source.write_to_json_file(stream);
    return stream;
}

/// @brief Extraction operator for decoding.
std::istream& operator>>(std::istream& stream, blueprint_t& destination);

#endif // Header Guard

