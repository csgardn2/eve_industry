/// @file manufacturability.cpp
/// @brief Implementation of @ref manufacturability_t class
/// 
/// * Contact conor.gardner@arm.com if you have questions about this code.
/// * Date Created = Thursday November 16 2017
/// * Documentation is generated by doxygen, see html/index.html

#include <fstream>
#include <string>
#include <string_view>

#include "blueprint.h"
#include "manufacturability.h"
#include "error.h"
#include "json.h"
#include "station_market.h"

void manufacturability_t::read_from_json_file(std::istream& file)
{
    
    // Get the number of characters in the input file.
    if (!file.good())
        throw error_message_t(error_code_t::FILE_SIZE_FAILED, "Error.  Failed to determine file size when encoding manufacturability_t object.\n");
    file.seekg(0, std::ios_base::end);
    unsigned file_size = file.tellg();
    file.seekg(0, std::ios_base::beg);
    
    // Read the entire file into RAM at once
    std::string buffer(file_size, '\0');
    file.read(buffer.data(), file_size);
    if (!file.good())
        throw error_message_t(error_code_t::FILE_READ_FAILED, "Error.  Failed to read file when decoding manufacturability_t object.\n");
    this->read_from_json_buffer(std::string_view(buffer));
    
}

void manufacturability_t::read_from_json_buffer(std::string_view buffer)
{
    
    Json::CharReaderBuilder builder;
    Json::CharReader* reader = builder.newCharReader();
    
    Json::Value json_root;
    std::string error_message;
    bool success = reader->parse(buffer.begin(), buffer.end(), &json_root, &error_message);
    delete reader;
    if (!success)
        Json::throwRuntimeError(error_message);
    
    // Now that the JSON syntax is parsed, extract the stat_list specific
    // data.
    this->read_from_json_structure(json_root);
    
}

void manufacturability_t::read_from_json_structure(const Json::Value& json_root)
{
    
    // Parse root
    if (!json_root.isObject())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  Root of manufacturability is not of type \"object\".\n");
    
    // Parse status
    const Json::Value& json_status = json_root["status"];
    if (!json_status.isString())
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, "Error.  <manufacturability_t>/status was not found or not of type \"string\".\n");
    const std::string& status_value = json_status.asString();
    
    if (status_value == "ok")
        this->status_ = status_t::OK;
    else if (status_value == "missing_market_data")
        this->status_ = status_t::MISSING_MARKET_DATA;
    else if (status_value == "invent_cannot_find_requisite_t1")
        this->status_ = status_t::INVENT_CANNOT_FIND_REQUISITE_T1;
    else if (status_value == "invent_cannot_copy_requisite_t1")
        this->status_ = status_t::INVENT_CANNOT_COPY_REQUISITE_T1;
    else
    {
        std::string message("Error.  Invalid value \"");
        message += status_value;
        message += "\" for enumerated field <manufacturability>/status.\n";
        throw error_message_t(error_code_t::JSON_SCHEMA_VIOLATION, message);
    }
    
    // Parse optional message
    const Json::Value& json_message = json_root["message"];
    if (json_message.isString())
        this->message_ = json_message.asString();
    else
        this->message_.clear();
    
}

void manufacturability_t::write_to_json_file(std::ostream& file, unsigned indent_start, unsigned spaces_per_tab) const
{
    std::string buffer;
    this->write_to_json_buffer(buffer, indent_start, spaces_per_tab);
    file << buffer;
    if (!file.good())
        throw error_message_t(error_code_t::FILE_WRITE_FAILED, "Error.  Failed to write file when encoding manufacturability_t object.\n");
}

void manufacturability_t::write_to_json_buffer(std::string& buffer, unsigned indent_start, unsigned spaces_per_tab) const
{
    
    std::string indent_1(indent_start + 1 * spaces_per_tab, ' ');
    std::string_view indent_0(indent_1.data(), indent_start);
    
    // It is recommended not to start a new line before the opening brace, to
    // enable chaining.
    buffer += "{\n";
    
    buffer += indent_1;
    buffer += "\"status\": \"";
    switch (this->status_)
    {
        case status_t::OK:
            buffer += "ok";
            break;
        case status_t::MISSING_MARKET_DATA:
            buffer += "missing_market_data";
            break;
        case status_t::INVENT_CANNOT_FIND_REQUISITE_T1:
            buffer += "invent_cannot_find_requisite_t1";
            break;
        case status_t::INVENT_CANNOT_COPY_REQUISITE_T1:
            buffer += "invent_cannot_copy_requisite_t1";
            break;
        default:
            throw error_message_t(error_code_t::UNKNOWN_MANUFACTURABILITY_STATUS, "Error.  Tried to encode manufacturability_t with invalid status.\n");
    }
    
    if (this->message_.empty())
        buffer += "\"\n";
    else {
        buffer += "\",\n";
        buffer += indent_1;
        buffer += "\"mesage\": \"";
        buffer += this->message_;
        buffer += "\"\n";
    }
    
    // It is recommended to not put a newline on the last brace to allow
    // comma chaining when this object is an element of an array.
    buffer += indent_0;
    buffer += '}';
    
}

std::istream& operator>>(std::istream& stream, manufacturability_t& destination)
{
    try
    {
        destination.read_from_json_file(stream);
    } catch (const error_message_t& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    } catch (const Json::Exception& error) {
        stream.setstate(std::ios::failbit);
        throw error;
    }
    return stream;
}

